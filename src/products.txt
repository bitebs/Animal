Используя представление, вывести количество продуктов в каждой категории и общее количество продуктов
select category_name, count(*) from cat_prod group by category_name;

select category_name, count(*) from cat_prod group by category_name union all select '_____','_____' union all select 'Total', count(*) from cat_prod;
   
  Создать представление для вывода регионов и территори
create view if not exists reg_ter as
 select territory_description, region_description from territories
 inner join region on region.region_id=territories.region_id

insert into territories (territory_id, territory_description, region_id) values (98105, 'ter 1', 1);
временные таблицы.
create temporary table ranks(name varchar(2));
INSERT INTO ranks(name) VALUES('6'),('7'),('8'),('9'),('10'),('В'),('Д'),('К'),('Т');
create temporary table suits(name varchar(10));


sqlite> CREATE temporary TABLE t1(v1 INT);
sqlite> INSERT INTO t1(v1) VALUES(1),(2),(3);
sqlite> CREATE temporary TABLE t2(v2 INT);
sqlite> INSERT INTO t2(v2) VALUES(2),(3),(4);
sqlite> select * from t1 union select * from t2;
select * from t1 union all select * from t2;
select * from t1 intersect select * from t2;
select * from t1 except select * from t2;
select v1 from t1 inner join t2 on v1=v2;

Создать триггер, который добавляет в новую таблицу территории при добавлении ее в основную таблицу
create table new_territories(id INTEGER PRIMARY KEY autoincrement, name text not null);
drop trigger if exists insert_territory;удаление тригера если он не заработает

CREATE TRIGGER insert_territory after insert ON territories
BEGIN
    insert into new_territories(name) values(new.territory_description);
END;

insert into territories (territory_id, territory_description, region_id) values (98107, 'new ter 1', 1);

Создать триггер, который проверяет название добавляемой территории (название не менее двух букв)
CREATE TRIGGER validate_territory_before_insert
   BEFORE INSERT ON territories
BEGIN
   SELECT
      CASE
	WHEN NEW.territory_description NOT LIKE '%__' THEN
   	  RAISE (ABORT,'Invalid name of territory')
       END;
END;

индексы
drop index if exists ind_territory;
create index ind_territory on territories (territory_description);
select * from territories where territory_description like 'Redmond';
pragma index_list(territories)

транзакции - несколько запросов объединённых
Транзакции (ACID - atomic, consistent, isolation, durable)
drop table if exists accounts;
drop table if exists account_changes

CREATE TABLE accounts ( 
	account_no INTEGER NOT NULL, 
	balance DECIMAL NOT NULL DEFAULT 0,
	PRIMARY KEY(account_no),
        CHECK(balance >= 0)
);

CREATE TABLE account_changes (
	change_no integer PRIMARY KEY autoincrement,
	account_no INTEGER NOT NULL, 
	flag TEXT NOT NULL, 
	amount DECIMAL NOT NULL, 
	changed_at TEXT NOT NULL 
);

BEGIN TRANSACTION;
UPDATE accounts SET balance = balance - 100 WHERE account_no = 100;
UPDATE accounts SET balance = balance + 100 WHERE account_no = 200;
INSERT INTO account_changes(account_no,flag,amount,changed_at) 
VALUES(100,'-',100,datetime('now'));

INSERT INTO account_changes(account_no,flag,amount,changed_at) 
VALUES(200,'+',100,datetime('now'));

Снять сумму, превышающую сумму на счету
BEGIN TRANSACTION;
UPDATE accounts
   SET balance = balance - 20000
 WHERE account_no = 100;
INSERT INTO account_changes(account_no,flag,amount,changed_at) 
VALUES(100,'-',20000,datetime('now'));

SELECT * FROM account_changes;

ROLLBACK;
SELECT * FROM account_changes;
select * from accounts;
